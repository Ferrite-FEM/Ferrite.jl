# Based on https://github.com/JuliaDiff/ChainRulesCore.jl/blob/main/.github/workflows/IntegrationTest.yml
name: Downstream

on:
  push:
    branches: ['master']
    tags: ['*']
  pull_request:

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: ${{ matrix.package.repo }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        julia-version: ['1']
        os: ['ubuntu-latest']
        package:
          # - {user: 'Ferrite-FEM', repo: 'FerriteDistributed.jl'} # Requires more efforts to be updated to 1.0
          - {user: 'Ferrite-FEM', repo: 'FerriteGmsh.jl'}
          - {user: 'Ferrite-FEM', repo: 'FerriteMeshParser.jl'}
          # - {user: 'Ferrite-FEM', repo: 'FerriteViz.jl'} # Requires release
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
      - uses: julia-actions/cache@v2
      # - uses: julia-actions/julia-buildpkg@v1
      - name: Clone Downstream
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.package.user }}/${{ matrix.package.repo }}
          path: downstream
      - name: Load this and run the downstream tests
        shell: julia --project=downstream {0}
        run: |
          using Pkg
          try
              # force it to use this PR's version of the package
              Pkg.develop(PackageSpec(path="."))  # resolver may fail with main deps
              Pkg.update()
              Pkg.test()  # resolver may fail with test time deps
          catch err
              rethrow() # Currently all packages tested are under Ferrite-FEM control so don't expect breakage
              err isa Pkg.Resolve.ResolverError || rethrow()
              # If we can't resolve that means this is incompatible by SemVer and this is fine
              # It means we marked this as a breaking change, so we don't need to worry about
              # Mistakenly introducing a breaking change, as we have intentionally made one
              @info "Not compatible with this release. No problem." exception=err
              exit(0)  # Exit immediately, as a success
          end
